// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// openapic (aka the OpenAPI Compiler) can be extended via plugins.  
// A plugin is just a program that reads a PluginRequest from stdin 
// and writes a PluginResponse to stdout.
//
// A plugin executable needs only to be placed somewhere in the path.  The
// plugin should be named "openapi_$NAME", and will then be used when the
// flag "--${NAME}_out" is passed to openapic.

syntax = "proto3";

import "google/protobuf/any.proto";
package openapiextension.plugin.v1;

// This option lets the proto compiler generate Java code inside the package
// name (see below) instead of inside an outer class. It creates a simpler
// developer experience by reducing one-level of name nesting and be
// consistent with most programming languages that don't support outer classes.
option java_multiple_files = true;

// The Java outer classname should be the filename in UpperCamelCase. This
// class is only used to hold proto descriptor, so developers don't need to
// work with it directly.
option java_outer_classname = "OpenAPIExtensionPluginV1";

// The Java package name must be proto package name with proper prefix.
option java_package = "org.openapic.v1";

// A reasonable prefix for the Objective-C symbols generated from the package.
// It should at a minimum be 3 characters long, all uppercase, and convention
// is to use an abbreviation of the package name. Something short, but
// hopefully unique enough to not conflict with things that may come along in
// the future. 'GPB' is reserved for the protocol buffer implementation itself.
//
option objc_class_prefix = "OAEP"; // "OpenAPI Compiler"

// The version number of OpenAPI compiler.
message Version {
  int32 major = 1;
  int32 minor = 2;
  int32 patch = 3;
  // A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
  // be empty for mainline stable releases.
  string suffix = 4;
}

// An encoded PluginRequest is written to the plugin's stdin.
message VendorExtensionHandlerRequest {

  // The OpenAPI descriptions that were explicitly listed on the command line.  
  // The specifications will appear in the order they are specified to openapic.
  Wrapper wrapper = 1;
  
  // The plugin parameter passed on the command-line.
  string parameter = 2;

  // The version number of openapi compiler.
  Version compiler_version = 3;
}

// The plugin writes an encoded PluginResponse to stdout.
message VendorExtensionHandlerResponse {

  // true if the extension is handled by the extension plugin; false otherwise
  bool handled = 1;
  
  // Error message.  If non-empty, the plugin failed. 
  // The plugin process should exit with status code zero 
  // even if it reports an error in this way.
  //
  // This should be used to indicate errors which prevent the plugin from 
  // operating as intended.  Errors which indicate a problem in openapic 
  // itself -- such as the input Document being unparseable -- should be 
  // reported by writing a message to stderr and exiting with a non-zero 
  // status code.
  repeated string error = 2;
  
  // text output
  google.protobuf.Any value = 3;
}

message Wrapper {

  // The filename or URL of the wrapped description
  string name = 1;
  
  // The version of the OpenAPI specification that is used by the wrapped description.
  string version = 2;

  // Name of the extension
  string extension_name = 3;

  // Must be a valid yaml for the proto
  string yaml = 4;
}
